Infrastructure to write programs with closures in C.

Usage:

Include cclosures.h, then in all places where functions are to be
passed that might be closures, a closure struct is passed instead,
called with CALL, and the functions to be passed are defined using
DEFN (if they are not a closure, i.e. don't have an environment [but
to be passed in places where closures might be passed]), or DEFCLOSURE
(if they do need to carry an environment).

SELFCALL is used for self recursion. [Why again?]

For recursive/mutual definitions (letrec), instead of DEFN, use DECLN
for the declaration and then IMPLN for the implementation of the
function [same thing for CLOSURE missing yet?].

Functions defined using DEFN/DECLN don't need to be
instantiated. Closures are allocated/instantiated using LET_CLOSURE,
or RETURN_CLOSURE. They are allocated using malloc.

Use DEFINTERFACE to declare the 'type class' of a function/closure
that you use in some place (like say the type of the functions
accepted by a map function). This declares the type of the function
pointer, but leaves its environment at a 'generic' "struct
Some_env". Although I haven't found a way to let the compiler check
the non-env parts only; to silence warnings, use the V macro to cast
your function to the interface.

See main.c and list.c for examples.
